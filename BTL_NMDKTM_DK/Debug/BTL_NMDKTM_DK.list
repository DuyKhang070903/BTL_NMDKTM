
BTL_NMDKTM_DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004564  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004730  08004730  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004730  08004730  00005730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004734  08004734  00005734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004738  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000010  08004744  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004744  00006140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099a4  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ef  00000000  00000000  0000f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  000112d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b1  00000000  00000000  00011cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015364  00000000  00000000  00012479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acb8  00000000  00000000  000277dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008801f  00000000  00000000  00032495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba4b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b8c  00000000  00000000  000ba4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000bd084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080046e4 	.word	0x080046e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080046e4 	.word	0x080046e4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b96a 	b.w	8000e60 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	460c      	mov	r4, r1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d14e      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	458c      	cmp	ip, r1
 8000bb4:	4686      	mov	lr, r0
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	d962      	bls.n	8000c82 <__udivmoddi4+0xde>
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0320 	rsb	r3, r2, #32
 8000bc2:	4091      	lsls	r1, r2
 8000bc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bcc:	4319      	orrs	r1, r3
 8000bce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd6:	fa1f f68c 	uxth.w	r6, ip
 8000bda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be2:	fb07 1114 	mls	r1, r7, r4, r1
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb04 f106 	mul.w	r1, r4, r6
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bfa:	f080 8112 	bcs.w	8000e22 <__udivmoddi4+0x27e>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 810f 	bls.w	8000e22 <__udivmoddi4+0x27e>
 8000c04:	3c02      	subs	r4, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a59      	subs	r1, r3, r1
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c12:	fb07 1110 	mls	r1, r7, r0, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb00 f606 	mul.w	r6, r0, r6
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x94>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2a:	f080 80fc 	bcs.w	8000e26 <__udivmoddi4+0x282>
 8000c2e:	429e      	cmp	r6, r3
 8000c30:	f240 80f9 	bls.w	8000e26 <__udivmoddi4+0x282>
 8000c34:	4463      	add	r3, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	1b9b      	subs	r3, r3, r6
 8000c3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11d      	cbz	r5, 8000c4a <__udivmoddi4+0xa6>
 8000c42:	40d3      	lsrs	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d905      	bls.n	8000c5e <__udivmoddi4+0xba>
 8000c52:	b10d      	cbz	r5, 8000c58 <__udivmoddi4+0xb4>
 8000c54:	e9c5 0100 	strd	r0, r1, [r5]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e7f5      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000c5e:	fab3 f183 	clz	r1, r3
 8000c62:	2900      	cmp	r1, #0
 8000c64:	d146      	bne.n	8000cf4 <__udivmoddi4+0x150>
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xcc>
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	f0c0 80f0 	bcc.w	8000e50 <__udivmoddi4+0x2ac>
 8000c70:	1a86      	subs	r6, r0, r2
 8000c72:	eb64 0303 	sbc.w	r3, r4, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d0e6      	beq.n	8000c4a <__udivmoddi4+0xa6>
 8000c7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c80:	e7e3      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	f040 8090 	bne.w	8000da8 <__udivmoddi4+0x204>
 8000c88:	eba1 040c 	sub.w	r4, r1, ip
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa1f f78c 	uxth.w	r7, ip
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000ca2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca6:	fb07 f006 	mul.w	r0, r7, r6
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x11c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x11a>
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2b4>
 8000cbe:	4626      	mov	r6, r4
 8000cc0:	1a1c      	subs	r4, r3, r0
 8000cc2:	fa1f f38e 	uxth.w	r3, lr
 8000cc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cca:	fb08 4410 	mls	r4, r8, r0, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb00 f707 	mul.w	r7, r0, r7
 8000cd6:	429f      	cmp	r7, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x148>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x146>
 8000ce4:	429f      	cmp	r7, r3
 8000ce6:	f200 80b0 	bhi.w	8000e4a <__udivmoddi4+0x2a6>
 8000cea:	4620      	mov	r0, r4
 8000cec:	1bdb      	subs	r3, r3, r7
 8000cee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf2:	e7a5      	b.n	8000c40 <__udivmoddi4+0x9c>
 8000cf4:	f1c1 0620 	rsb	r6, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cfe:	431f      	orrs	r7, r3
 8000d00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d04:	fa04 f301 	lsl.w	r3, r4, r1
 8000d08:	ea43 030c 	orr.w	r3, r3, ip
 8000d0c:	40f4      	lsrs	r4, r6
 8000d0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d12:	0c38      	lsrs	r0, r7, #16
 8000d14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d18:	fbb4 fef0 	udiv	lr, r4, r0
 8000d1c:	fa1f fc87 	uxth.w	ip, r7
 8000d20:	fb00 441e 	mls	r4, r0, lr, r4
 8000d24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d28:	fb0e f90c 	mul.w	r9, lr, ip
 8000d2c:	45a1      	cmp	r9, r4
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x1a6>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d3a:	f080 8084 	bcs.w	8000e46 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8081 	bls.w	8000e46 <__udivmoddi4+0x2a2>
 8000d44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d48:	443c      	add	r4, r7
 8000d4a:	eba4 0409 	sub.w	r4, r4, r9
 8000d4e:	fa1f f983 	uxth.w	r9, r3
 8000d52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d56:	fb00 4413 	mls	r4, r0, r3, r4
 8000d5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x1d2>
 8000d66:	193c      	adds	r4, r7, r4
 8000d68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d6c:	d267      	bcs.n	8000e3e <__udivmoddi4+0x29a>
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	d965      	bls.n	8000e3e <__udivmoddi4+0x29a>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d7e:	eba4 040c 	sub.w	r4, r4, ip
 8000d82:	429c      	cmp	r4, r3
 8000d84:	46ce      	mov	lr, r9
 8000d86:	469c      	mov	ip, r3
 8000d88:	d351      	bcc.n	8000e2e <__udivmoddi4+0x28a>
 8000d8a:	d04e      	beq.n	8000e2a <__udivmoddi4+0x286>
 8000d8c:	b155      	cbz	r5, 8000da4 <__udivmoddi4+0x200>
 8000d8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d92:	eb64 040c 	sbc.w	r4, r4, ip
 8000d96:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9a:	40cb      	lsrs	r3, r1
 8000d9c:	431e      	orrs	r6, r3
 8000d9e:	40cc      	lsrs	r4, r1
 8000da0:	e9c5 6400 	strd	r6, r4, [r5]
 8000da4:	2100      	movs	r1, #0
 8000da6:	e750      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000da8:	f1c2 0320 	rsb	r3, r2, #32
 8000dac:	fa20 f103 	lsr.w	r1, r0, r3
 8000db0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db4:	fa24 f303 	lsr.w	r3, r4, r3
 8000db8:	4094      	lsls	r4, r2
 8000dba:	430c      	orrs	r4, r1
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd0:	0c23      	lsrs	r3, r4, #16
 8000dd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd6:	fb00 f107 	mul.w	r1, r0, r7
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x24c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000de6:	d22c      	bcs.n	8000e42 <__udivmoddi4+0x29e>
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d92a      	bls.n	8000e42 <__udivmoddi4+0x29e>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4463      	add	r3, ip
 8000df0:	1a5b      	subs	r3, r3, r1
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e00:	fb01 f307 	mul.w	r3, r1, r7
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x276>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e10:	d213      	bcs.n	8000e3a <__udivmoddi4+0x296>
 8000e12:	42a3      	cmp	r3, r4
 8000e14:	d911      	bls.n	8000e3a <__udivmoddi4+0x296>
 8000e16:	3902      	subs	r1, #2
 8000e18:	4464      	add	r4, ip
 8000e1a:	1ae4      	subs	r4, r4, r3
 8000e1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e20:	e739      	b.n	8000c96 <__udivmoddi4+0xf2>
 8000e22:	4604      	mov	r4, r0
 8000e24:	e6f0      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e26:	4608      	mov	r0, r1
 8000e28:	e706      	b.n	8000c38 <__udivmoddi4+0x94>
 8000e2a:	45c8      	cmp	r8, r9
 8000e2c:	d2ae      	bcs.n	8000d8c <__udivmoddi4+0x1e8>
 8000e2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e36:	3801      	subs	r0, #1
 8000e38:	e7a8      	b.n	8000d8c <__udivmoddi4+0x1e8>
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	e7ed      	b.n	8000e1a <__udivmoddi4+0x276>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e799      	b.n	8000d76 <__udivmoddi4+0x1d2>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e7d4      	b.n	8000df0 <__udivmoddi4+0x24c>
 8000e46:	46d6      	mov	lr, sl
 8000e48:	e77f      	b.n	8000d4a <__udivmoddi4+0x1a6>
 8000e4a:	4463      	add	r3, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e74d      	b.n	8000cec <__udivmoddi4+0x148>
 8000e50:	4606      	mov	r6, r0
 8000e52:	4623      	mov	r3, r4
 8000e54:	4608      	mov	r0, r1
 8000e56:	e70f      	b.n	8000c78 <__udivmoddi4+0xd4>
 8000e58:	3e02      	subs	r6, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	e730      	b.n	8000cc0 <__udivmoddi4+0x11c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0000      	movs	r0, r0
	...

08000e68 <HAL_TIM_IC_CaptureCallback>:
uint8_t Is_First_Captured = 0;  	// Co bat canh len hay canh xuong
float Distance = 0;  				// Khoang cach do duoc


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7f1b      	ldrb	r3, [r3, #28]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	f040 8082 	bne.w	8000f7e <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured == 0)
 8000e7a:	4b45      	ldr	r3, [pc, #276]	@ (8000f90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11a      	bne.n	8000eb8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e82:	2100      	movs	r1, #0
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f002 ff27 	bl	8003cd8 <HAL_TIM_ReadCapturedValue>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a41      	ldr	r2, [pc, #260]	@ (8000f94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e8e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // Co bao bat duoc xung 1
 8000e90:	4b3f      	ldr	r3, [pc, #252]	@ (8000f90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
			// doi bat tu canh len -> canh xuong
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6a1a      	ldr	r2, [r3, #32]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 020a 	bic.w	r2, r2, #10
 8000ea4:	621a      	str	r2, [r3, #32]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0202 	orr.w	r2, r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]
			// doi bat tu canh len -> canh xuong
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000eb6:	e062      	b.n	8000f7e <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)
 8000eb8:	4b35      	ldr	r3, [pc, #212]	@ (8000f90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d15e      	bne.n	8000f7e <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f002 ff08 	bl	8003cd8 <HAL_TIM_ReadCapturedValue>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a33      	ldr	r2, [pc, #204]	@ (8000f98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ecc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8000ed6:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4b2e      	ldr	r3, [pc, #184]	@ (8000f94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d907      	bls.n	8000ef2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	4a2b      	ldr	r2, [pc, #172]	@ (8000f9c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e00f      	b.n	8000f12 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000ef2:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d909      	bls.n	8000f12 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000efe:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f0c:	33ff      	adds	r3, #255	@ 0xff
 8000f0e:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f10:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034 / 2;
 8000f12:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff faa0 	bl	800045c <__aeabi_ui2d>
 8000f1c:	a31a      	add	r3, pc, #104	@ (adr r3, 8000f88 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fb15 	bl	8000550 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f36:	f7ff fc35 	bl	80007a4 <__aeabi_ddiv>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fdc7 	bl	8000ad4 <__aeabi_d2f>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a15      	ldr	r2, [pc, #84]	@ (8000fa0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f4a:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6a1a      	ldr	r2, [r3, #32]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 020a 	bic.w	r2, r2, #10
 8000f60:	621a      	str	r2, [r3, #32]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6a12      	ldr	r2, [r2, #32]
 8000f6c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0202 	bic.w	r2, r2, #2
 8000f7c:	60da      	str	r2, [r3, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	b020c49c 	.word	0xb020c49c
 8000f8c:	3fa16872 	.word	0x3fa16872
 8000f90:	20000038 	.word	0x20000038
 8000f94:	2000002c 	.word	0x2000002c
 8000f98:	20000030 	.word	0x20000030
 8000f9c:	20000034 	.word	0x20000034
 8000fa0:	2000003c 	.word	0x2000003c
 8000fa4:	20000060 	.word	0x20000060

08000fa8 <Delay>:

//Tao xung 10us
void Delay(uint32_t time)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <Delay+0x2c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000fb8:	bf00      	nop
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <Delay+0x2c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d8f9      	bhi.n	8000fba <Delay+0x12>
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000060 	.word	0x20000060

08000fd8 <HCSR05_GetDis>:

// Hàm đo khoảng cách bằng cảm biến HC-SR05
float HCSR05_GetDis(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2180      	movs	r1, #128	@ 0x80
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <HCSR05_GetDis+0x3c>)
 8000fe2:	f001 fbb5 	bl	8002750 <HAL_GPIO_WritePin>
	Delay(10);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f7ff ffde 	bl	8000fa8 <Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2180      	movs	r1, #128	@ 0x80
 8000ff0:	4808      	ldr	r0, [pc, #32]	@ (8001014 <HCSR05_GetDis+0x3c>)
 8000ff2:	f001 fbad 	bl	8002750 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); // Bat ngat de do k/c
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HCSR05_GetDis+0x40>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HCSR05_GetDis+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0202 	orr.w	r2, r2, #2
 8001004:	60da      	str	r2, [r3, #12]
	return Distance;
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HCSR05_GetDis+0x44>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	ee07 3a90 	vmov	s15, r3
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000
 8001018:	20000060 	.word	0x20000060
 800101c:	2000003c 	.word	0x2000003c

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001024:	f001 f868 	bl	80020f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f82c 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f9ca 	bl	80013c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001030:	f000 f890 	bl	8001154 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001034:	f000 f902 	bl	800123c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001038:	f000 f976 	bl	8001328 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // HCSR05 ECHO
 800103c:	2100      	movs	r1, #0
 800103e:	480c      	ldr	r0, [pc, #48]	@ (8001070 <main+0x50>)
 8001040:	f002 fa1a 	bl	8003478 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // L298N ENB (PA15)
 8001044:	2100      	movs	r1, #0
 8001046:	480b      	ldr	r0, [pc, #44]	@ (8001074 <main+0x54>)
 8001048:	f002 f90c 	bl	8003264 <HAL_TIM_PWM_Start>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);   // L298N IN3
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // L298N IN4
  HAL_TIM_Base_Start_IT(&htim3); // Thoi gian dieu khien he thong
 800104c:	480a      	ldr	r0, [pc, #40]	@ (8001078 <main+0x58>)
 800104e:	f002 f84d 	bl	80030ec <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Dis = HCSR05_GetDis();
 8001052:	f7ff ffc1 	bl	8000fd8 <HCSR05_GetDis>
 8001056:	eef0 7a40 	vmov.f32	s15, s0
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <main+0x5c>)
 800105c:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(200);
 8001060:	20c8      	movs	r0, #200	@ 0xc8
 8001062:	f001 f8bb 	bl	80021dc <HAL_Delay>
	  flag = 1;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <main+0x60>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
	  Dis = HCSR05_GetDis();
 800106c:	bf00      	nop
 800106e:	e7f0      	b.n	8001052 <main+0x32>
 8001070:	20000060 	.word	0x20000060
 8001074:	200000a8 	.word	0x200000a8
 8001078:	200000f0 	.word	0x200000f0
 800107c:	20000138 	.word	0x20000138
 8001080:	20000054 	.word	0x20000054

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	@ 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2230      	movs	r2, #48	@ 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fafa 	bl	800468c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <SystemClock_Config+0xc8>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	4a26      	ldr	r2, [pc, #152]	@ (800114c <SystemClock_Config+0xc8>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <SystemClock_Config+0xc8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <SystemClock_Config+0xcc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a20      	ldr	r2, [pc, #128]	@ (8001150 <SystemClock_Config+0xcc>)
 80010ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <SystemClock_Config+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f4:	2304      	movs	r3, #4
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010f8:	2364      	movs	r3, #100	@ 0x64
 80010fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fb3b 	bl	8002784 <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001114:	f000 fe88 	bl	8001e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2103      	movs	r1, #3
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fd9d 	bl	8002c74 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001140:	f000 fe72 	bl	8001e28 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	@ 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800117e:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <MX_TIM1_Init+0xe0>)
 8001180:	4a2d      	ldr	r2, [pc, #180]	@ (8001238 <MX_TIM1_Init+0xe4>)
 8001182:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001184:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <MX_TIM1_Init+0xe0>)
 8001186:	2263      	movs	r2, #99	@ 0x63
 8001188:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <MX_TIM1_Init+0xe0>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <MX_TIM1_Init+0xe0>)
 8001192:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001196:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <MX_TIM1_Init+0xe0>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <MX_TIM1_Init+0xe0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <MX_TIM1_Init+0xe0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011aa:	4822      	ldr	r0, [pc, #136]	@ (8001234 <MX_TIM1_Init+0xe0>)
 80011ac:	f001 ff4e 	bl	800304c <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80011b6:	f000 fe37 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011be:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	4619      	mov	r1, r3
 80011c6:	481b      	ldr	r0, [pc, #108]	@ (8001234 <MX_TIM1_Init+0xe0>)
 80011c8:	f002 fcbe 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011d2:	f000 fe29 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011d6:	4817      	ldr	r0, [pc, #92]	@ (8001234 <MX_TIM1_Init+0xe0>)
 80011d8:	f002 f8f4 	bl	80033c4 <HAL_TIM_IC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011e2:	f000 fe21 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	480f      	ldr	r0, [pc, #60]	@ (8001234 <MX_TIM1_Init+0xe0>)
 80011f6:	f003 f9c7 	bl	8004588 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001200:	f000 fe12 	bl	8001e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <MX_TIM1_Init+0xe0>)
 800121c:	f002 fb36 	bl	800388c <HAL_TIM_IC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001226:	f000 fdff 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	@ 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000060 	.word	0x20000060
 8001238:	40010000 	.word	0x40010000

0800123c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800126c:	4b2d      	ldr	r3, [pc, #180]	@ (8001324 <MX_TIM2_Init+0xe8>)
 800126e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001272:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001274:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <MX_TIM2_Init+0xe8>)
 8001276:	2263      	movs	r2, #99	@ 0x63
 8001278:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <MX_TIM2_Init+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001280:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <MX_TIM2_Init+0xe8>)
 8001282:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <MX_TIM2_Init+0xe8>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <MX_TIM2_Init+0xe8>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001294:	4823      	ldr	r0, [pc, #140]	@ (8001324 <MX_TIM2_Init+0xe8>)
 8001296:	f001 fed9 	bl	800304c <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012a0:	f000 fdc2 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ae:	4619      	mov	r1, r3
 80012b0:	481c      	ldr	r0, [pc, #112]	@ (8001324 <MX_TIM2_Init+0xe8>)
 80012b2:	f002 fc49 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012bc:	f000 fdb4 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <MX_TIM2_Init+0xe8>)
 80012c2:	f001 ff75 	bl	80031b0 <HAL_TIM_PWM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012cc:	f000 fdac 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4619      	mov	r1, r3
 80012de:	4811      	ldr	r0, [pc, #68]	@ (8001324 <MX_TIM2_Init+0xe8>)
 80012e0:	f003 f952 	bl	8004588 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012ea:	f000 fd9d 	bl	8001e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	@ 0x60
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <MX_TIM2_Init+0xe8>)
 8001306:	f002 fb5d 	bl	80039c4 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001310:	f000 fd8a 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <MX_TIM2_Init+0xe8>)
 8001316:	f000 fe37 	bl	8001f88 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	@ 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000a8 	.word	0x200000a8

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_TIM3_Init+0x94>)
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <MX_TIM3_Init+0x98>)
 8001348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800134a:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <MX_TIM3_Init+0x94>)
 800134c:	2263      	movs	r2, #99	@ 0x63
 800134e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_TIM3_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <MX_TIM3_Init+0x94>)
 8001358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_TIM3_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <MX_TIM3_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800136a:	4814      	ldr	r0, [pc, #80]	@ (80013bc <MX_TIM3_Init+0x94>)
 800136c:	f001 fe6e 	bl	800304c <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001376:	f000 fd57 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4619      	mov	r1, r3
 8001386:	480d      	ldr	r0, [pc, #52]	@ (80013bc <MX_TIM3_Init+0x94>)
 8001388:	f002 fbde 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001392:	f000 fd49 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_TIM3_Init+0x94>)
 80013a4:	f003 f8f0 	bl	8004588 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013ae:	f000 fd3b 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000f0 	.word	0x200000f0
 80013c0:	40000400 	.word	0x40000400

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a2f      	ldr	r2, [pc, #188]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a28      	ldr	r2, [pc, #160]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 8001400:	f043 0310 	orr.w	r3, r3, #16
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a21      	ldr	r2, [pc, #132]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a1a      	ldr	r2, [pc, #104]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_GPIO_Init+0xdc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCSR05_TRIG_GPIO_Port, HCSR05_TRIG_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	4815      	ldr	r0, [pc, #84]	@ (80014a4 <MX_GPIO_Init+0xe0>)
 8001450:	f001 f97e 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L298N_IN3_Pin|L298N_IN4_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2128      	movs	r1, #40	@ 0x28
 8001458:	4813      	ldr	r0, [pc, #76]	@ (80014a8 <MX_GPIO_Init+0xe4>)
 800145a:	f001 f979 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HCSR05_TRIG_Pin */
  GPIO_InitStruct.Pin = HCSR05_TRIG_Pin;
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCSR05_TRIG_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	@ (80014a4 <MX_GPIO_Init+0xe0>)
 8001476:	f000 ffe7 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : L298N_IN3_Pin L298N_IN4_Pin */
  GPIO_InitStruct.Pin = L298N_IN3_Pin|L298N_IN4_Pin;
 800147a:	2328      	movs	r3, #40	@ 0x28
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_GPIO_Init+0xe4>)
 8001492:	f000 ffd9 	bl	8002448 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40020400 	.word	0x40020400

080014ac <fuzzyController>:

y_defuz=TS/MS
 */

float fuzzyController(float a, float b)
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	ed2d 8b02 	vpush	{d8}
 80014b2:	b0c8      	sub	sp, #288	@ 0x120
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014be:	ed83 0a00 	vstr	s0, [r3]
 80014c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014ca:	edc3 0a00 	vstr	s1, [r3]
    float e[]={hlt_hinhthang(a,-2,-1,-0.25,-0.1),hlt_tamgiac(a,-0.25,-0.1,0),hlt_tamgiac(a,-0.1,0,0.1),
 80014ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014d6:	ed9f 2a65 	vldr	s4, [pc, #404]	@ 800166c <fuzzyController+0x1c0>
 80014da:	eefd 1a00 	vmov.f32	s3, #208	@ 0xbe800000 -0.250
 80014de:	eebf 1a00 	vmov.f32	s2, #240	@ 0xbf800000 -1.0
 80014e2:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 80014e6:	ed93 0a00 	vldr	s0, [r3]
 80014ea:	f000 f9f1 	bl	80018d0 <hlt_hinhthang>
 80014ee:	eef0 7a40 	vmov.f32	s15, s0
 80014f2:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
 80014f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014fe:	eddf 1a5c 	vldr	s3, [pc, #368]	@ 8001670 <fuzzyController+0x1c4>
 8001502:	ed9f 1a5a 	vldr	s2, [pc, #360]	@ 800166c <fuzzyController+0x1c0>
 8001506:	eefd 0a00 	vmov.f32	s1, #208	@ 0xbe800000 -0.250
 800150a:	ed93 0a00 	vldr	s0, [r3]
 800150e:	f000 fa63 	bl	80019d8 <hlt_tamgiac>
 8001512:	eef0 7a40 	vmov.f32	s15, s0
 8001516:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
 800151a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800151e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001522:	eddf 1a54 	vldr	s3, [pc, #336]	@ 8001674 <fuzzyController+0x1c8>
 8001526:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 8001670 <fuzzyController+0x1c4>
 800152a:	eddf 0a50 	vldr	s1, [pc, #320]	@ 800166c <fuzzyController+0x1c0>
 800152e:	ed93 0a00 	vldr	s0, [r3]
 8001532:	f000 fa51 	bl	80019d8 <hlt_tamgiac>
 8001536:	eef0 7a40 	vmov.f32	s15, s0
 800153a:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
    		hlt_tamgiac(a,0,0.1,0.25),hlt_hinhthang(a,0.1,0.25,1,2)};
 800153e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001542:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001546:	eef5 1a00 	vmov.f32	s3, #80	@ 0x3e800000  0.250
 800154a:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8001674 <fuzzyController+0x1c8>
 800154e:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8001670 <fuzzyController+0x1c4>
 8001552:	ed93 0a00 	vldr	s0, [r3]
 8001556:	f000 fa3f 	bl	80019d8 <hlt_tamgiac>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
    float e[]={hlt_hinhthang(a,-2,-1,-0.25,-0.1),hlt_tamgiac(a,-0.25,-0.1,0),hlt_tamgiac(a,-0.1,0,0.1),
 800155e:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
    		hlt_tamgiac(a,0,0.1,0.25),hlt_hinhthang(a,0.1,0.25,1,2)};
 8001562:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001566:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800156a:	eeb0 2a00 	vmov.f32	s4, #0	@ 0x40000000  2.0
 800156e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8001572:	eeb5 1a00 	vmov.f32	s2, #80	@ 0x3e800000  0.250
 8001576:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8001674 <fuzzyController+0x1c8>
 800157a:	ed93 0a00 	vldr	s0, [r3]
 800157e:	f000 f9a7 	bl	80018d0 <hlt_hinhthang>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
    float e[]={hlt_hinhthang(a,-2,-1,-0.25,-0.1),hlt_tamgiac(a,-0.25,-0.1,0),hlt_tamgiac(a,-0.1,0,0.1),
 8001586:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110

    float edot[]={hlt_hinhthang(b,-1.5,-1,-0.3,-0.2),hlt_tamgiac(b,-0.3,-0.2,0),hlt_tamgiac(b,-0.2,0,0.2),
 800158a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800158e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001592:	ed9f 2a39 	vldr	s4, [pc, #228]	@ 8001678 <fuzzyController+0x1cc>
 8001596:	eddf 1a39 	vldr	s3, [pc, #228]	@ 800167c <fuzzyController+0x1d0>
 800159a:	eebf 1a00 	vmov.f32	s2, #240	@ 0xbf800000 -1.0
 800159e:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80015a2:	ed93 0a00 	vldr	s0, [r3]
 80015a6:	f000 f993 	bl	80018d0 <hlt_hinhthang>
 80015aa:	eef0 7a40 	vmov.f32	s15, s0
 80015ae:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
 80015b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015ba:	eddf 1a2d 	vldr	s3, [pc, #180]	@ 8001670 <fuzzyController+0x1c4>
 80015be:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8001678 <fuzzyController+0x1cc>
 80015c2:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 800167c <fuzzyController+0x1d0>
 80015c6:	ed93 0a00 	vldr	s0, [r3]
 80015ca:	f000 fa05 	bl	80019d8 <hlt_tamgiac>
 80015ce:	eef0 7a40 	vmov.f32	s15, s0
 80015d2:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
 80015d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015de:	eddf 1a28 	vldr	s3, [pc, #160]	@ 8001680 <fuzzyController+0x1d4>
 80015e2:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8001670 <fuzzyController+0x1c4>
 80015e6:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8001678 <fuzzyController+0x1cc>
 80015ea:	ed93 0a00 	vldr	s0, [r3]
 80015ee:	f000 f9f3 	bl	80019d8 <hlt_tamgiac>
 80015f2:	eef0 7a40 	vmov.f32	s15, s0
 80015f6:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
    		hlt_tamgiac(b,0,0.2,0.3),hlt_hinhthang(b,0.2,0.3,1,2)};
 80015fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001602:	eddf 1a20 	vldr	s3, [pc, #128]	@ 8001684 <fuzzyController+0x1d8>
 8001606:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8001680 <fuzzyController+0x1d4>
 800160a:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001670 <fuzzyController+0x1c4>
 800160e:	ed93 0a00 	vldr	s0, [r3]
 8001612:	f000 f9e1 	bl	80019d8 <hlt_tamgiac>
 8001616:	eef0 7a40 	vmov.f32	s15, s0
    float edot[]={hlt_hinhthang(b,-1.5,-1,-0.3,-0.2),hlt_tamgiac(b,-0.3,-0.2,0),hlt_tamgiac(b,-0.2,0,0.2),
 800161a:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
    		hlt_tamgiac(b,0,0.2,0.3),hlt_hinhthang(b,0.2,0.3,1,2)};
 800161e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001622:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001626:	eeb0 2a00 	vmov.f32	s4, #0	@ 0x40000000  2.0
 800162a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800162e:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 8001684 <fuzzyController+0x1d8>
 8001632:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001680 <fuzzyController+0x1d4>
 8001636:	ed93 0a00 	vldr	s0, [r3]
 800163a:	f000 f949 	bl	80018d0 <hlt_hinhthang>
 800163e:	eef0 7a40 	vmov.f32	s15, s0
    float edot[]={hlt_hinhthang(b,-1.5,-1,-0.3,-0.2),hlt_tamgiac(b,-0.3,-0.2,0),hlt_tamgiac(b,-0.2,0,0.2),
 8001642:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
//Dieu khien theo su thay doi don vi pwm tren 1s
//Duty cycle = Don vi pwm/1000 cho ku = 1
    float y[]={-125,-90,-60,0,25,50,75};
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <fuzzyController+0x1dc>)
 8001648:	f107 04d0 	add.w	r4, r7, #208	@ 0xd0
 800164c:	461d      	mov	r5, r3
 800164e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    float beta[5][5];

    for (int i = 0; i < 5; i++)
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001660:	e04b      	b.n	80016fa <fuzzyController+0x24e>
    {
     for (int j = 0; j < 5 ;j++)
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001668:	e03e      	b.n	80016e8 <fuzzyController+0x23c>
 800166a:	bf00      	nop
 800166c:	bdcccccd 	.word	0xbdcccccd
 8001670:	00000000 	.word	0x00000000
 8001674:	3dcccccd 	.word	0x3dcccccd
 8001678:	be4ccccd 	.word	0xbe4ccccd
 800167c:	be99999a 	.word	0xbe99999a
 8001680:	3e4ccccd 	.word	0x3e4ccccd
 8001684:	3e99999a 	.word	0x3e99999a
 8001688:	080046fc 	.word	0x080046fc
     {
       beta[i][j]= MIN(e[i],edot[j]);
 800168c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001696:	443b      	add	r3, r7
 8001698:	3b20      	subs	r3, #32
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80016a8:	443b      	add	r3, r7
 80016aa:	3b34      	subs	r3, #52	@ 0x34
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	eef0 0a47 	vmov.f32	s1, s14
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	f000 fa38 	bl	8001b2c <MIN>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80016d6:	443b      	add	r3, r7
 80016d8:	3bb4      	subs	r3, #180	@ 0xb4
 80016da:	edc3 7a00 	vstr	s15, [r3]
     for (int j = 0; j < 5 ;j++)
 80016de:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016e2:	3301      	adds	r3, #1
 80016e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80016e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	ddcd      	ble.n	800168c <fuzzyController+0x1e0>
    for (int i = 0; i < 5; i++)
 80016f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016f4:	3301      	adds	r3, #1
 80016f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80016fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016fe:	2b04      	cmp	r3, #4
 8001700:	ddaf      	ble.n	8001662 <fuzzyController+0x1b6>
     }
    }

    float NB[] = {beta[e_NB][edot_NB],beta[e_NB][edot_NS],beta[e_NS][edot_NB]};
 8001702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001704:	663b      	str	r3, [r7, #96]	@ 0x60
 8001706:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001708:	667b      	str	r3, [r7, #100]	@ 0x64
 800170a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800170e:	66bb      	str	r3, [r7, #104]	@ 0x68
    float NM[] = {beta[e_NB][edot_ZE],beta[e_NS][edot_NS],beta[e_ZE][edot_NB]};
 8001710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001712:	657b      	str	r3, [r7, #84]	@ 0x54
 8001714:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001718:	65bb      	str	r3, [r7, #88]	@ 0x58
 800171a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800171e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float NS[] = {beta[e_NB][edot_PS],beta[e_NS][edot_ZE],beta[e_ZE][edot_NS],beta[e_PS][edot_NB]};
 8001720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001722:	647b      	str	r3, [r7, #68]	@ 0x44
 8001724:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800172a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800172e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001734:	653b      	str	r3, [r7, #80]	@ 0x50
    float ZE[] = {beta[e_NB][edot_PB],beta[e_NS][edot_PS],beta[e_ZE][edot_ZE],beta[e_PS][edot_NS],beta[e_PB][edot_NB]};
 8001736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001738:	633b      	str	r3, [r7, #48]	@ 0x30
 800173a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001740:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001744:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800174c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001750:	643b      	str	r3, [r7, #64]	@ 0x40
    float PS[] = {beta[e_NS][edot_PB],beta[e_ZE][edot_PS],beta[e_PS][edot_ZE],beta[e_PB][edot_NS]};
 8001752:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001756:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800175a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001764:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001768:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001772:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001776:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001780:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001784:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001788:	60da      	str	r2, [r3, #12]
    float PM[] = {beta[e_ZE][edot_PB],beta[e_PS][edot_PS],beta[e_PB][edot_ZE]};
 800178a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800178e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001792:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800179c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80017aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017b2:	609a      	str	r2, [r3, #8]
    float PB[] = {beta[e_PB][edot_PB],beta[e_PB][edot_PS],beta[e_PS][edot_PB]};
 80017b4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80017b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80017c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80017d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017dc:	609a      	str	r2, [r3, #8]


    float ans = (rule(NB,y[y_NB],3)+rule(NM,y[y_NM],3)+rule(NS,y[y_NS],4)+rule(ZE,y[y_ZE],5)+
 80017de:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80017e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017e6:	2103      	movs	r1, #3
 80017e8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f9b9 	bl	8001b64 <rule>
 80017f2:	eeb0 8a40 	vmov.f32	s16, s0
 80017f6:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 80017fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017fe:	2103      	movs	r1, #3
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f9ad 	bl	8001b64 <rule>
 800180a:	eef0 7a40 	vmov.f32	s15, s0
 800180e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001812:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8001816:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800181a:	2104      	movs	r1, #4
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f99f 	bl	8001b64 <rule>
 8001826:	eef0 7a40 	vmov.f32	s15, s0
 800182a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800182e:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001832:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001836:	2105      	movs	r1, #5
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f991 	bl	8001b64 <rule>
 8001842:	eef0 7a40 	vmov.f32	s15, s0
 8001846:	ee38 8a27 	vadd.f32	s16, s16, s15
    		rule(PS,y[y_PS],4)+rule(PM,y[y_PM],3)+rule(PB,y[y_PB],3))/sum_array(beta,5,5); // y_defuz=TS/MS
 800184a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	2104      	movs	r1, #4
 8001854:	eeb0 0a67 	vmov.f32	s0, s15
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f983 	bl	8001b64 <rule>
 800185e:	eef0 7a40 	vmov.f32	s15, s0
    float ans = (rule(NB,y[y_NB],3)+rule(NM,y[y_NM],3)+rule(NS,y[y_NS],4)+rule(ZE,y[y_ZE],5)+
 8001862:	ee38 8a27 	vadd.f32	s16, s16, s15
    		rule(PS,y[y_PS],4)+rule(PM,y[y_PM],3)+rule(PB,y[y_PB],3))/sum_array(beta,5,5); // y_defuz=TS/MS
 8001866:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2103      	movs	r1, #3
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f975 	bl	8001b64 <rule>
 800187a:	eef0 7a40 	vmov.f32	s15, s0
 800187e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001882:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2103      	movs	r1, #3
 800188c:	eeb0 0a67 	vmov.f32	s0, s15
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f967 	bl	8001b64 <rule>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800189e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018a2:	2205      	movs	r2, #5
 80018a4:	2105      	movs	r1, #5
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f904 	bl	8001ab4 <sum_array>
 80018ac:	eeb0 7a40 	vmov.f32	s14, s0
    float ans = (rule(NB,y[y_NB],3)+rule(NM,y[y_NM],3)+rule(NS,y[y_NS],4)+rule(ZE,y[y_ZE],5)+
 80018b0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80018b4:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114

    return ans;
 80018b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018bc:	ee07 3a90 	vmov	s15, r3
}
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80018c8:	46bd      	mov	sp, r7
 80018ca:	ecbd 8b02 	vpop	{d8}
 80018ce:	bdb0      	pop	{r4, r5, r7, pc}

080018d0 <hlt_hinhthang>:

float hlt_hinhthang(float data, float l, float cl, float cr, float r)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80018da:	edc7 0a04 	vstr	s1, [r7, #16]
 80018de:	ed87 1a03 	vstr	s2, [r7, #12]
 80018e2:	edc7 1a02 	vstr	s3, [r7, #8]
 80018e6:	ed87 2a01 	vstr	s4, [r7, #4]
    if ((data < l)   && (data >= r)) return 0;
 80018ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	d50b      	bpl.n	8001914 <hlt_hinhthang+0x44>
 80018fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001900:	edd7 7a01 	vldr	s15, [r7, #4]
 8001904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	db02      	blt.n	8001914 <hlt_hinhthang+0x44>
 800190e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80019d4 <hlt_hinhthang+0x104>
 8001912:	e058      	b.n	80019c6 <hlt_hinhthang+0xf6>
    if ((data >= l)  && (data < cl)) return (data - l)/(cl - l);
 8001914:	ed97 7a05 	vldr	s14, [r7, #20]
 8001918:	edd7 7a04 	vldr	s15, [r7, #16]
 800191c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	db17      	blt.n	8001956 <hlt_hinhthang+0x86>
 8001926:	ed97 7a05 	vldr	s14, [r7, #20]
 800192a:	edd7 7a03 	vldr	s15, [r7, #12]
 800192e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	d50e      	bpl.n	8001956 <hlt_hinhthang+0x86>
 8001938:	ed97 7a05 	vldr	s14, [r7, #20]
 800193c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001940:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001944:	ed97 7a03 	vldr	s14, [r7, #12]
 8001948:	edd7 7a04 	vldr	s15, [r7, #16]
 800194c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001954:	e037      	b.n	80019c6 <hlt_hinhthang+0xf6>
    if ((data >= cl) && (data < cr)) return 1;
 8001956:	ed97 7a05 	vldr	s14, [r7, #20]
 800195a:	edd7 7a03 	vldr	s15, [r7, #12]
 800195e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	db0b      	blt.n	8001980 <hlt_hinhthang+0xb0>
 8001968:	ed97 7a05 	vldr	s14, [r7, #20]
 800196c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	d502      	bpl.n	8001980 <hlt_hinhthang+0xb0>
 800197a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800197e:	e022      	b.n	80019c6 <hlt_hinhthang+0xf6>
    if ((data >= cr) && (data < r))  return (r - data)/(r - cr);
 8001980:	ed97 7a05 	vldr	s14, [r7, #20]
 8001984:	edd7 7a02 	vldr	s15, [r7, #8]
 8001988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	db17      	blt.n	80019c2 <hlt_hinhthang+0xf2>
 8001992:	ed97 7a05 	vldr	s14, [r7, #20]
 8001996:	edd7 7a01 	vldr	s15, [r7, #4]
 800199a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d50e      	bpl.n	80019c2 <hlt_hinhthang+0xf2>
 80019a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80019a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c0:	e001      	b.n	80019c6 <hlt_hinhthang+0xf6>
    return 0;
 80019c2:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80019d4 <hlt_hinhthang+0x104>
}
 80019c6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	00000000 	.word	0x00000000

080019d8 <hlt_tamgiac>:


float hlt_tamgiac(float data,float l,float m, float r)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	ed87 0a03 	vstr	s0, [r7, #12]
 80019e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80019e6:	ed87 1a01 	vstr	s2, [r7, #4]
 80019ea:	edc7 1a00 	vstr	s3, [r7]
    if ((data < l)  || (data >= r)) return 0;
 80019ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	d408      	bmi.n	8001a12 <hlt_tamgiac+0x3a>
 8001a00:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a04:	edd7 7a00 	vldr	s15, [r7]
 8001a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	db02      	blt.n	8001a18 <hlt_tamgiac+0x40>
 8001a12:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8001ab0 <hlt_tamgiac+0xd8>
 8001a16:	e043      	b.n	8001aa0 <hlt_tamgiac+0xc8>
    if ((data >= l) && (data < m))  return (data - l)/(m - l);
 8001a18:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	db17      	blt.n	8001a5a <hlt_tamgiac+0x82>
 8001a2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	d50e      	bpl.n	8001a5a <hlt_tamgiac+0x82>
 8001a3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a48:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a58:	e022      	b.n	8001aa0 <hlt_tamgiac+0xc8>
    if ((data >= m) && (data < r))  return (r - data)/(r - m);
 8001a5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	db17      	blt.n	8001a9c <hlt_tamgiac+0xc4>
 8001a6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a70:	edd7 7a00 	vldr	s15, [r7]
 8001a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	d50e      	bpl.n	8001a9c <hlt_tamgiac+0xc4>
 8001a7e:	ed97 7a00 	vldr	s14, [r7]
 8001a82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a8a:	ed97 7a00 	vldr	s14, [r7]
 8001a8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a9a:	e001      	b.n	8001aa0 <hlt_tamgiac+0xc8>
    return 0;
 8001a9c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8001ab0 <hlt_tamgiac+0xd8>
}
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	00000000 	.word	0x00000000

08001ab4 <sum_array>:

// Tinh tong theo cong trung binh co trong so
float sum_array (float data[][5],char n, char m)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	70bb      	strb	r3, [r7, #2]
    float s=0;
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
    for (int i =0; i < n; i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	e01f      	b.n	8001b10 <sum_array+0x5c>
    {
     for (int j=0; j<m; j++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e015      	b.n	8001b02 <sum_array+0x4e>
     {
       s += data[i][j];
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	441a      	add	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	edc7 7a05 	vstr	s15, [r7, #20]
     for (int j=0; j<m; j++)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	78bb      	ldrb	r3, [r7, #2]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbe5      	blt.n	8001ad6 <sum_array+0x22>
    for (int i =0; i < n; i++)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbdb      	blt.n	8001ad0 <sum_array+0x1c>
     }
    }
    return s;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	ee07 3a90 	vmov	s15, r3
}
 8001b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <MIN>:


float MIN(float a,float b)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b36:	edc7 0a00 	vstr	s1, [r7]
    if (a < b) return a;
 8001b3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b3e:	edd7 7a00 	vldr	s15, [r7]
 8001b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d501      	bpl.n	8001b50 <MIN+0x24>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	e000      	b.n	8001b52 <MIN+0x26>
    else return b;
 8001b50:	683b      	ldr	r3, [r7, #0]
}
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <rule>:


float rule(float data[],float val,char n)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b70:	460b      	mov	r3, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
    float s = 0;
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < n; i++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	e012      	b.n	8001ba6 <rule+0x42>
    {
     s += data[i]*val;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9c:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < n; i++)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbe8      	blt.n	8001b80 <rule+0x1c>
    }
    return s;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	ee07 3a90 	vmov	s15, r3
}
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <Saturation>:

//Ham chuan hoa cac gia tri -1<x<1
float Saturation(float x)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x >= 1)
 8001bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	db03      	blt.n	8001be8 <Saturation+0x24>
		x = 1;
 8001be0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	e00a      	b.n	8001bfe <Saturation+0x3a>
	else if(x <= -1)
 8001be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	d801      	bhi.n	8001bfe <Saturation+0x3a>
		x = -1;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <Saturation+0x50>)
 8001bfc:	607b      	str	r3, [r7, #4]
	return x;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	ee07 3a90 	vmov	s15, r3
}
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	bf800000 	.word	0xbf800000

08001c18 <Motor_Control>:

void Motor_Control(int32_t pwmValue) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    if (pwmValue > 0) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dd0a      	ble.n	8001c3c <Motor_Control+0x24>
        // Bom
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);   // L298N IN3
 8001c26:	2201      	movs	r2, #1
 8001c28:	2108      	movs	r1, #8
 8001c2a:	480d      	ldr	r0, [pc, #52]	@ (8001c60 <Motor_Control+0x48>)
 8001c2c:	f000 fd90 	bl	8002750 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // L298N IN4
 8001c30:	2200      	movs	r2, #0
 8001c32:	2120      	movs	r1, #32
 8001c34:	480a      	ldr	r0, [pc, #40]	@ (8001c60 <Motor_Control+0x48>)
 8001c36:	f000 fd8b 	bl	8002750 <HAL_GPIO_WritePin>
 8001c3a:	e009      	b.n	8001c50 <Motor_Control+0x38>
    } else {
        // Dung Bom
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // L298N IN3
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2108      	movs	r1, #8
 8001c40:	4807      	ldr	r0, [pc, #28]	@ (8001c60 <Motor_Control+0x48>)
 8001c42:	f000 fd85 	bl	8002750 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // L298N IN4
 8001c46:	2200      	movs	r2, #0
 8001c48:	2120      	movs	r1, #32
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <Motor_Control+0x48>)
 8001c4c:	f000 fd80 	bl	8002750 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwmValue);
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <Motor_Control+0x4c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020400 	.word	0x40020400
 8001c64:	200000a8 	.word	0x200000a8

08001c68 <HAL_TIM_PeriodElapsedCallback>:

/*
 Thoi gian dieu khien cua chuong trinh la 200ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	ed2d 8b02 	vpush	{d8}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) // Kiểm tra nếu là timer 3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a61      	ldr	r2, [pc, #388]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	f040 80b0 	bne.w	8001de0 <HAL_TIM_PeriodElapsedCallback+0x178>
    {
//    	Dis = HCSR05_GetDis();
//      Delay(200000); // 200ms
    	//HAL_Delay(200);
    	if (flag){
 8001c80:	4b60      	ldr	r3, [pc, #384]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80a8 	beq.w	8001dda <HAL_TIM_PeriodElapsedCallback+0x172>

    	e_k1 = e_k;
 8001c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a5f      	ldr	r2, [pc, #380]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001c90:	6013      	str	r3, [r2, #0]
    	e_k = Setpoint - (TANK_HEIGHT - Dis);
 8001c92:	4b5f      	ldr	r3, [pc, #380]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca8:	4b57      	ldr	r3, [pc, #348]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001caa:	edc3 7a00 	vstr	s15, [r3]
    	e_dot = (e_k - e_k1)/0.2;
 8001cae:	4b56      	ldr	r3, [pc, #344]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001cb0:	ed93 7a00 	vldr	s14, [r3]
 8001cb4:	4b55      	ldr	r3, [pc, #340]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbe:	ee17 0a90 	vmov	r0, s15
 8001cc2:	f7fe fbed 	bl	80004a0 <__aeabi_f2d>
 8001cc6:	a34a      	add	r3, pc, #296	@ (adr r3, 8001df0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fd6a 	bl	80007a4 <__aeabi_ddiv>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7fe fefc 	bl	8000ad4 <__aeabi_d2f>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a4d      	ldr	r2, [pc, #308]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ce0:	6013      	str	r3, [r2, #0]

    	e_k_input = e_k*K1;
 8001ce2:	4b49      	ldr	r3, [pc, #292]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001ce4:	ed93 7a00 	vldr	s14, [r3]
 8001ce8:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf0:	4b49      	ldr	r3, [pc, #292]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
    	e_k_dot_input = e_dot*K2;
 8001cf6:	4b47      	ldr	r3, [pc, #284]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fbd0 	bl	80004a0 <__aeabi_f2d>
 8001d00:	a33d      	add	r3, pc, #244	@ (adr r3, 8001df8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fd4d 	bl	80007a4 <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe fedf 	bl	8000ad4 <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a40      	ldr	r2, [pc, #256]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d1a:	6013      	str	r3, [r2, #0]

    	pwmValue += (0.2*fuzzyController(Saturation(e_k_input), Saturation(e_k_dot_input)));  //Thay vi xuat ra % cong suat r cho ku = 1000 thì xuat thang ra gia tri cua pwm lun
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	f7ff ff4d 	bl	8001bc4 <Saturation>
 8001d2a:	eeb0 8a40 	vmov.f32	s16, s0
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eeb0 0a67 	vmov.f32	s0, s15
 8001d38:	f7ff ff44 	bl	8001bc4 <Saturation>
 8001d3c:	eef0 7a40 	vmov.f32	s15, s0
 8001d40:	eef0 0a67 	vmov.f32	s1, s15
 8001d44:	eeb0 0a48 	vmov.f32	s0, s16
 8001d48:	f7ff fbb0 	bl	80014ac <fuzzyController>
 8001d4c:	ee10 3a10 	vmov	r3, s0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fba5 	bl	80004a0 <__aeabi_f2d>
 8001d56:	a326      	add	r3, pc, #152	@ (adr r3, 8001df0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fbf8 	bl	8000550 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fa39 	bl	80001e4 <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	492a      	ldr	r1, [pc, #168]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d78:	e9c1 2300 	strd	r2, r3, [r1]

    	if (pwmValue >= 900)
 8001d7c:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d88:	f7fe fe68 	bl	8000a5c <__aeabi_dcmpge>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_TIM_PeriodElapsedCallback+0x136>
    		pwmValue = 900;
 8001d92:	4923      	ldr	r1, [pc, #140]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d9a:	e9c1 2300 	strd	r2, r3, [r1]
    	if (pwmValue < 0)
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001da0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	f7fe fe42 	bl	8000a34 <__aeabi_dcmplt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <HAL_TIM_PeriodElapsedCallback+0x15c>
    		pwmValue = 0;
 8001db6:	491a      	ldr	r1, [pc, #104]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9c1 2300 	strd	r2, r3, [r1]

    	Motor_Control((int32_t)pwmValue);
 8001dc4:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fe59 	bl	8000a84 <__aeabi_d2iz>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff1f 	bl	8001c18 <Motor_Control>
    	}
    	flag = 0;
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
    }
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	ecbd 8b02 	vpop	{d8}
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	9999999a 	.word	0x9999999a
 8001df4:	3fc99999 	.word	0x3fc99999
 8001df8:	33333333 	.word	0x33333333
 8001dfc:	3fd33333 	.word	0x3fd33333
 8001e00:	40000400 	.word	0x40000400
 8001e04:	20000054 	.word	0x20000054
 8001e08:	20000040 	.word	0x20000040
 8001e0c:	20000048 	.word	0x20000048
 8001e10:	20000138 	.word	0x20000138
 8001e14:	20000044 	.word	0x20000044
 8001e18:	2000004c 	.word	0x2000004c
 8001e1c:	20000050 	.word	0x20000050
 8001e20:	20000058 	.word	0x20000058
 8001e24:	408c2000 	.word	0x408c2000

08001e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <Error_Handler+0x8>

08001e34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	4a0f      	ldr	r2, [pc, #60]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	4a08      	ldr	r2, [pc, #32]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	@ 0x30
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a35      	ldr	r2, [pc, #212]	@ (8001f78 <HAL_TIM_Base_MspInit+0xf4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d135      	bne.n	8001f12 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	4a33      	ldr	r2, [pc, #204]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a2c      	ldr	r2, [pc, #176]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4821      	ldr	r0, [pc, #132]	@ (8001f80 <HAL_TIM_Base_MspInit+0xfc>)
 8001efc:	f000 faa4 	bl	8002448 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	201b      	movs	r0, #27
 8001f06:	f000 fa68 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f0a:	201b      	movs	r0, #27
 8001f0c:	f000 fa81 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f10:	e02e      	b.n	8001f70 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1a:	d10e      	bne.n	8001f3a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	4a15      	ldr	r2, [pc, #84]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2c:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
}
 8001f38:	e01a      	b.n	8001f70 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <HAL_TIM_Base_MspInit+0x100>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d115      	bne.n	8001f70 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_TIM_Base_MspInit+0xf8>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	201d      	movs	r0, #29
 8001f66:	f000 fa38 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f6a:	201d      	movs	r0, #29
 8001f6c:	f000 fa51 	bl	8002412 <HAL_NVIC_EnableIRQ>
}
 8001f70:	bf00      	nop
 8001f72:	3730      	adds	r7, #48	@ 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40000400 	.word	0x40000400

08001f88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d11e      	bne.n	8001fe8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_TIM_MspPostInit+0x68>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <HAL_TIM_MspPostInit+0x68>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <HAL_TIM_MspPostInit+0x68>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <HAL_TIM_MspPostInit+0x6c>)
 8001fe4:	f000 fa30 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <NMI_Handler+0x4>

08002000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <MemManage_Handler+0x4>

08002010 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <UsageFault_Handler+0x4>

08002020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204e:	f000 f8a5 	bl	800219c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <TIM1_CC_IRQHandler+0x10>)
 800205e:	f001 fb25 	bl	80036ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000060 	.word	0x20000060

0800206c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <TIM3_IRQHandler+0x10>)
 8002072:	f001 fb1b 	bl	80036ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200000f0 	.word	0x200000f0

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <SystemInit+0x20>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <SystemInit+0x20>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a8:	f7ff ffea 	bl	8002080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ac:	480c      	ldr	r0, [pc, #48]	@ (80020e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ae:	490d      	ldr	r1, [pc, #52]	@ (80020e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020c4:	4c0a      	ldr	r4, [pc, #40]	@ (80020f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d2:	f002 fae3 	bl	800469c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d6:	f7fe ffa3 	bl	8001020 <main>
  bx  lr    
 80020da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020e8:	08004738 	.word	0x08004738
  ldr r2, =_sbss
 80020ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80020f0:	20000140 	.word	0x20000140

080020f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC_IRQHandler>
	...

080020f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <HAL_Init+0x40>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <HAL_Init+0x40>)
 800210e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <HAL_Init+0x40>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002120:	2003      	movs	r0, #3
 8002122:	f000 f94f 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002126:	200f      	movs	r0, #15
 8002128:	f000 f808 	bl	800213c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800212c:	f7ff fe82 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00

0800213c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_InitTick+0x54>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <HAL_InitTick+0x58>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002152:	fbb3 f3f1 	udiv	r3, r3, r1
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f967 	bl	800242e <HAL_SYSTICK_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e00e      	b.n	8002188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d80a      	bhi.n	8002186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002170:	2200      	movs	r2, #0
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f000 f92f 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800217c:	4a06      	ldr	r2, [pc, #24]	@ (8002198 <HAL_InitTick+0x5c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000000 	.word	0x20000000
 8002194:	20000008 	.word	0x20000008
 8002198:	20000004 	.word	0x20000004

0800219c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_IncTick+0x20>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_IncTick+0x24>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	@ (80021c0 <HAL_IncTick+0x24>)
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000008 	.word	0x20000008
 80021c0:	2000013c 	.word	0x2000013c

080021c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return uwTick;
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <HAL_GetTick+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	2000013c 	.word	0x2000013c

080021dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff ffee 	bl	80021c4 <HAL_GetTick>
 80021e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d005      	beq.n	8002202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_Delay+0x44>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002202:	bf00      	nop
 8002204:	f7ff ffde 	bl	80021c4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d8f7      	bhi.n	8002204 <HAL_Delay+0x28>
  {
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000008 	.word	0x20000008

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800224c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	db0b      	blt.n	80022b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	4907      	ldr	r1, [pc, #28]	@ (80022c0 <__NVIC_EnableIRQ+0x38>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2001      	movs	r0, #1
 80022aa:	fa00 f202 	lsl.w	r2, r0, r2
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff8e 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff29 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff3e 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff8e 	bl	8002318 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff31 	bl	8002288 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa2 	bl	8002380 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e159      	b.n	8002718 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8148 	bne.w	8002712 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d005      	beq.n	800249a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	2b02      	cmp	r3, #2
 8002498:	d130      	bne.n	80024fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a2 	beq.w	8002712 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b57      	ldr	r3, [pc, #348]	@ (8002730 <HAL_GPIO_Init+0x2e8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	4a56      	ldr	r2, [pc, #344]	@ (8002730 <HAL_GPIO_Init+0x2e8>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025de:	4b54      	ldr	r3, [pc, #336]	@ (8002730 <HAL_GPIO_Init+0x2e8>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ea:	4a52      	ldr	r2, [pc, #328]	@ (8002734 <HAL_GPIO_Init+0x2ec>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a49      	ldr	r2, [pc, #292]	@ (8002738 <HAL_GPIO_Init+0x2f0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x202>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a48      	ldr	r2, [pc, #288]	@ (800273c <HAL_GPIO_Init+0x2f4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x1fe>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a47      	ldr	r2, [pc, #284]	@ (8002740 <HAL_GPIO_Init+0x2f8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x1fa>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a46      	ldr	r2, [pc, #280]	@ (8002744 <HAL_GPIO_Init+0x2fc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x1f6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a45      	ldr	r2, [pc, #276]	@ (8002748 <HAL_GPIO_Init+0x300>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x1f2>
 8002636:	2304      	movs	r3, #4
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x204>
 800263a:	2307      	movs	r3, #7
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x204>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x204>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x204>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x204>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	@ (8002734 <HAL_GPIO_Init+0x2ec>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <HAL_GPIO_Init+0x304>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a2f      	ldr	r2, [pc, #188]	@ (800274c <HAL_GPIO_Init+0x304>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <HAL_GPIO_Init+0x304>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a24      	ldr	r2, [pc, #144]	@ (800274c <HAL_GPIO_Init+0x304>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b23      	ldr	r3, [pc, #140]	@ (800274c <HAL_GPIO_Init+0x304>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1a      	ldr	r2, [pc, #104]	@ (800274c <HAL_GPIO_Init+0x304>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b18      	ldr	r3, [pc, #96]	@ (800274c <HAL_GPIO_Init+0x304>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a0f      	ldr	r2, [pc, #60]	@ (800274c <HAL_GPIO_Init+0x304>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f aea2 	bls.w	8002464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	@ 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40013c00 	.word	0x40013c00

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e267      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027a2:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ae:	4b85      	ldr	r3, [pc, #532]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d112      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4b82      	ldr	r3, [pc, #520]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05b      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d157      	bne.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e242      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x74>
 80027ea:	4b76      	ldr	r3, [pc, #472]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a75      	ldr	r2, [pc, #468]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b70      	ldr	r3, [pc, #448]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6f      	ldr	r2, [pc, #444]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6c      	ldr	r2, [pc, #432]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 800281c:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a68      	ldr	r2, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff fcc2 	bl	80021c4 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7ff fcbe 	bl	80021c4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e207      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b5b      	ldr	r3, [pc, #364]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xc0>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff fcae 	bl	80021c4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7ff fcaa 	bl	80021c4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1f3      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	4b51      	ldr	r3, [pc, #324]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800289a:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11c      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b2:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1c7      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4937      	ldr	r1, [pc, #220]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e03a      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <HAL_RCC_OscConfig+0x244>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7ff fc63 	bl	80021c4 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002902:	f7ff fc5f 	bl	80021c4 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1a8      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4925      	ldr	r1, [pc, #148]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <HAL_RCC_OscConfig+0x244>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7ff fc42 	bl	80021c4 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7ff fc3e 	bl	80021c4 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e187      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d036      	beq.n	80029dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_RCC_OscConfig+0x248>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7ff fc22 	bl	80021c4 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7ff fc1e 	bl	80021c4 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e167      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x200>
 80029a2:	e01b      	b.n	80029dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_OscConfig+0x248>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7ff fc0b 	bl	80021c4 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e00e      	b.n	80029d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7ff fc07 	bl	80021c4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d907      	bls.n	80029d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e150      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470000 	.word	0x42470000
 80029cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	4b88      	ldr	r3, [pc, #544]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ea      	bne.n	80029b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8097 	beq.w	8002b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b81      	ldr	r3, [pc, #516]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b77      	ldr	r3, [pc, #476]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b74      	ldr	r3, [pc, #464]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7ff fbc7 	bl	80021c4 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7ff fbc3 	bl	80021c4 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e10c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2ea>
 8002a60:	4b64      	ldr	r3, [pc, #400]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a64:	4a63      	ldr	r2, [pc, #396]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6c:	e01c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x30c>
 8002a76:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a82:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a86:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	4a54      	ldr	r2, [pc, #336]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7ff fb88 	bl	80021c4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7ff fb84 	bl	80021c4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0cb      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ee      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7ff fb72 	bl	80021c4 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7ff fb6e 	bl	80021c4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0b5      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afa:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ee      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	4a38      	ldr	r2, [pc, #224]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a1 	beq.w	8002c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b22:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d05c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d141      	bne.n	8002bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fb42 	bl	80021c4 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7ff fb3e 	bl	80021c4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e087      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	4b27      	ldr	r3, [pc, #156]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	491b      	ldr	r1, [pc, #108]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7ff fb17 	bl	80021c4 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7ff fb13 	bl	80021c4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e05c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x416>
 8002bb8:	e054      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7ff fb00 	bl	80021c4 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7ff fafc 	bl	80021c4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e045      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
 8002be6:	e03d      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e038      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x4ec>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d121      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d111      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0cc      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b68      	ldr	r3, [pc, #416]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d90c      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b65      	ldr	r3, [pc, #404]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d044      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d119      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	4b3f      	ldr	r3, [pc, #252]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e067      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4934      	ldr	r1, [pc, #208]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7ff fa2e 	bl	80021c4 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7ff fa2a 	bl	80021c4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e04f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b25      	ldr	r3, [pc, #148]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d20c      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de6:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	490a      	ldr	r1, [pc, #40]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f98e 	bl	800213c <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08004718 	.word	0x08004718
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b094      	sub	sp, #80	@ 0x50
 8002e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e58:	4b79      	ldr	r3, [pc, #484]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d00d      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x40>
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	f200 80e1 	bhi.w	800302c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x34>
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e72:	e0db      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b73      	ldr	r3, [pc, #460]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e78:	e0db      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e7a:	4b73      	ldr	r3, [pc, #460]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e7e:	e0d8      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e80:	4b6f      	ldr	r3, [pc, #444]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d063      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e96:	4b6a      	ldr	r3, [pc, #424]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ea0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	462b      	mov	r3, r5
 8002eb6:	f04f 0000 	mov.w	r0, #0
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	0159      	lsls	r1, r3, #5
 8002ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec4:	0150      	lsls	r0, r2, #5
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4621      	mov	r1, r4
 8002ecc:	1a51      	subs	r1, r2, r1
 8002ece:	6139      	str	r1, [r7, #16]
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	018b      	lsls	r3, r1, #6
 8002ee8:	4651      	mov	r1, sl
 8002eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eee:	4651      	mov	r1, sl
 8002ef0:	018a      	lsls	r2, r1, #6
 8002ef2:	4651      	mov	r1, sl
 8002ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ef8:	4659      	mov	r1, fp
 8002efa:	eb63 0901 	sbc.w	r9, r3, r1
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	eb18 0303 	adds.w	r3, r8, r3
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	462b      	mov	r3, r5
 8002f20:	eb49 0303 	adc.w	r3, r9, r3
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f32:	4629      	mov	r1, r5
 8002f34:	024b      	lsls	r3, r1, #9
 8002f36:	4621      	mov	r1, r4
 8002f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	024a      	lsls	r2, r1, #9
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f46:	2200      	movs	r2, #0
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f50:	f7fd fe10 	bl	8000b74 <__aeabi_uldivmod>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f5c:	e058      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5e:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	2200      	movs	r2, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	4611      	mov	r1, r2
 8002f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f6e:	623b      	str	r3, [r7, #32]
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f78:	4642      	mov	r2, r8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	f04f 0000 	mov.w	r0, #0
 8002f80:	f04f 0100 	mov.w	r1, #0
 8002f84:	0159      	lsls	r1, r3, #5
 8002f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8a:	0150      	lsls	r0, r2, #5
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4641      	mov	r1, r8
 8002f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f96:	4649      	mov	r1, r9
 8002f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	00eb      	lsls	r3, r5, #3
 8002fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc6:	00e2      	lsls	r2, r4, #3
 8002fc8:	4614      	mov	r4, r2
 8002fca:	461d      	mov	r5, r3
 8002fcc:	4643      	mov	r3, r8
 8002fce:	18e3      	adds	r3, r4, r3
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	eb45 0303 	adc.w	r3, r5, r3
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	028b      	lsls	r3, r1, #10
 8002fea:	4621      	mov	r1, r4
 8002fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	028a      	lsls	r2, r1, #10
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	61fa      	str	r2, [r7, #28]
 8003000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003004:	f7fd fdb6 	bl	8000b74 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4613      	mov	r3, r2
 800300e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800302a:	e002      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x204>)
 800302e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003034:	4618      	mov	r0, r3
 8003036:	3750      	adds	r7, #80	@ 0x50
 8003038:	46bd      	mov	sp, r7
 800303a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	00f42400 	.word	0x00f42400
 8003048:	007a1200 	.word	0x007a1200

0800304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e041      	b.n	80030e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe ff06 	bl	8001e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 fe86 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d001      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e044      	b.n	800318e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <HAL_TIM_Base_Start_IT+0xb0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d018      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x6c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312e:	d013      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x6c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1a      	ldr	r2, [pc, #104]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00e      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x6c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a19      	ldr	r2, [pc, #100]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x6c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a17      	ldr	r2, [pc, #92]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x6c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a16      	ldr	r2, [pc, #88]	@ (80031ac <HAL_TIM_Base_Start_IT+0xc0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d111      	bne.n	800317c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b06      	cmp	r3, #6
 8003168:	d010      	beq.n	800318c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	e007      	b.n	800318c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40010000 	.word	0x40010000
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40014000 	.word	0x40014000

080031b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e041      	b.n	8003246 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f839 	bl	800324e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f000 fdd4 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <HAL_TIM_PWM_Start+0x24>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e022      	b.n	80032ce <HAL_TIM_PWM_Start+0x6a>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b04      	cmp	r3, #4
 800328c:	d109      	bne.n	80032a2 <HAL_TIM_PWM_Start+0x3e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e015      	b.n	80032ce <HAL_TIM_PWM_Start+0x6a>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d109      	bne.n	80032bc <HAL_TIM_PWM_Start+0x58>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e008      	b.n	80032ce <HAL_TIM_PWM_Start+0x6a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e068      	b.n	80033a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_PWM_Start+0x82>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032e4:	e013      	b.n	800330e <HAL_TIM_PWM_Start+0xaa>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x92>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f4:	e00b      	b.n	800330e <HAL_TIM_PWM_Start+0xaa>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_PWM_Start+0xa2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003304:	e003      	b.n	800330e <HAL_TIM_PWM_Start+0xaa>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2201      	movs	r2, #1
 8003314:	6839      	ldr	r1, [r7, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f001 f910 	bl	800453c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a23      	ldr	r2, [pc, #140]	@ (80033b0 <HAL_TIM_PWM_Start+0x14c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d107      	bne.n	8003336 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003334:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1d      	ldr	r2, [pc, #116]	@ (80033b0 <HAL_TIM_PWM_Start+0x14c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d018      	beq.n	8003372 <HAL_TIM_PWM_Start+0x10e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003348:	d013      	beq.n	8003372 <HAL_TIM_PWM_Start+0x10e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a19      	ldr	r2, [pc, #100]	@ (80033b4 <HAL_TIM_PWM_Start+0x150>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_TIM_PWM_Start+0x10e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a17      	ldr	r2, [pc, #92]	@ (80033b8 <HAL_TIM_PWM_Start+0x154>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_TIM_PWM_Start+0x10e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a16      	ldr	r2, [pc, #88]	@ (80033bc <HAL_TIM_PWM_Start+0x158>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_TIM_PWM_Start+0x10e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a14      	ldr	r2, [pc, #80]	@ (80033c0 <HAL_TIM_PWM_Start+0x15c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d111      	bne.n	8003396 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d010      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003394:	e007      	b.n	80033a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40000800 	.word	0x40000800
 80033bc:	40000c00 	.word	0x40000c00
 80033c0:	40014000 	.word	0x40014000

080033c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e041      	b.n	800345a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f839 	bl	8003462 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 fcca 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <HAL_TIM_IC_Start_IT+0x1e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e013      	b.n	80034be <HAL_TIM_IC_Start_IT+0x46>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_IC_Start_IT+0x2e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e00b      	b.n	80034be <HAL_TIM_IC_Start_IT+0x46>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_IC_Start_IT+0x3e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	e003      	b.n	80034be <HAL_TIM_IC_Start_IT+0x46>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_TIM_IC_Start_IT+0x58>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e013      	b.n	80034f8 <HAL_TIM_IC_Start_IT+0x80>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d104      	bne.n	80034e0 <HAL_TIM_IC_Start_IT+0x68>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e00b      	b.n	80034f8 <HAL_TIM_IC_Start_IT+0x80>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d104      	bne.n	80034f0 <HAL_TIM_IC_Start_IT+0x78>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e003      	b.n	80034f8 <HAL_TIM_IC_Start_IT+0x80>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80034fa:	7bbb      	ldrb	r3, [r7, #14]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d102      	bne.n	8003506 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003500:	7b7b      	ldrb	r3, [r7, #13]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0c2      	b.n	8003690 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_TIM_IC_Start_IT+0xa2>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003518:	e013      	b.n	8003542 <HAL_TIM_IC_Start_IT+0xca>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d104      	bne.n	800352a <HAL_TIM_IC_Start_IT+0xb2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003528:	e00b      	b.n	8003542 <HAL_TIM_IC_Start_IT+0xca>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d104      	bne.n	800353a <HAL_TIM_IC_Start_IT+0xc2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003538:	e003      	b.n	8003542 <HAL_TIM_IC_Start_IT+0xca>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d104      	bne.n	8003552 <HAL_TIM_IC_Start_IT+0xda>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003550:	e013      	b.n	800357a <HAL_TIM_IC_Start_IT+0x102>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b04      	cmp	r3, #4
 8003556:	d104      	bne.n	8003562 <HAL_TIM_IC_Start_IT+0xea>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003560:	e00b      	b.n	800357a <HAL_TIM_IC_Start_IT+0x102>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d104      	bne.n	8003572 <HAL_TIM_IC_Start_IT+0xfa>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003570:	e003      	b.n	800357a <HAL_TIM_IC_Start_IT+0x102>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d841      	bhi.n	8003604 <HAL_TIM_IC_Start_IT+0x18c>
 8003580:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <HAL_TIM_IC_Start_IT+0x110>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	080035bd 	.word	0x080035bd
 800358c:	08003605 	.word	0x08003605
 8003590:	08003605 	.word	0x08003605
 8003594:	08003605 	.word	0x08003605
 8003598:	080035cf 	.word	0x080035cf
 800359c:	08003605 	.word	0x08003605
 80035a0:	08003605 	.word	0x08003605
 80035a4:	08003605 	.word	0x08003605
 80035a8:	080035e1 	.word	0x080035e1
 80035ac:	08003605 	.word	0x08003605
 80035b0:	08003605 	.word	0x08003605
 80035b4:	08003605 	.word	0x08003605
 80035b8:	080035f3 	.word	0x080035f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0202 	orr.w	r2, r2, #2
 80035ca:	60da      	str	r2, [r3, #12]
      break;
 80035cc:	e01d      	b.n	800360a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0204 	orr.w	r2, r2, #4
 80035dc:	60da      	str	r2, [r3, #12]
      break;
 80035de:	e014      	b.n	800360a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0208 	orr.w	r2, r2, #8
 80035ee:	60da      	str	r2, [r3, #12]
      break;
 80035f0:	e00b      	b.n	800360a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0210 	orr.w	r2, r2, #16
 8003600:	60da      	str	r2, [r3, #12]
      break;
 8003602:	e002      	b.n	800360a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	bf00      	nop
  }

  if (status == HAL_OK)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d13e      	bne.n	800368e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	6839      	ldr	r1, [r7, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 ff8f 	bl	800453c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1d      	ldr	r2, [pc, #116]	@ (8003698 <HAL_TIM_IC_Start_IT+0x220>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d018      	beq.n	800365a <HAL_TIM_IC_Start_IT+0x1e2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003630:	d013      	beq.n	800365a <HAL_TIM_IC_Start_IT+0x1e2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_TIM_IC_Start_IT+0x224>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00e      	beq.n	800365a <HAL_TIM_IC_Start_IT+0x1e2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a17      	ldr	r2, [pc, #92]	@ (80036a0 <HAL_TIM_IC_Start_IT+0x228>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_TIM_IC_Start_IT+0x1e2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a16      	ldr	r2, [pc, #88]	@ (80036a4 <HAL_TIM_IC_Start_IT+0x22c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_TIM_IC_Start_IT+0x1e2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a14      	ldr	r2, [pc, #80]	@ (80036a8 <HAL_TIM_IC_Start_IT+0x230>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d111      	bne.n	800367e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b06      	cmp	r3, #6
 800366a:	d010      	beq.n	800368e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	e007      	b.n	800368e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40010000 	.word	0x40010000
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40014000 	.word	0x40014000

080036ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d020      	beq.n	8003710 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0202 	mvn.w	r2, #2
 80036e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd fbb6 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fb2e 	bl	8003d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fb35 	bl	8003d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d020      	beq.n	800375c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0204 	mvn.w	r2, #4
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fb90 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fb08 	bl	8003d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fb0f 	bl	8003d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d020      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01b      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0208 	mvn.w	r2, #8
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd fb6a 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fae2 	bl	8003d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fae9 	bl	8003d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0210 	mvn.w	r2, #16
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2208      	movs	r2, #8
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd fb44 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fabc 	bl	8003d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fac3 	bl	8003d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00c      	beq.n	8003818 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fe fa28 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00c      	beq.n	800383c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 ff1e 	bl	8004678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00c      	beq.n	8003860 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa94 	bl	8003d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0220 	mvn.w	r2, #32
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fef0 	bl	8004664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e088      	b.n	80039bc <HAL_TIM_IC_ConfigChannel+0x130>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80038c8:	f000 fc80 	bl	80041cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 020c 	bic.w	r2, r2, #12
 80038da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6999      	ldr	r1, [r3, #24]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	619a      	str	r2, [r3, #24]
 80038ee:	e060      	b.n	80039b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d11c      	bne.n	8003930 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003906:	f000 fcf8 	bl	80042fa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003918:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6999      	ldr	r1, [r3, #24]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	021a      	lsls	r2, r3, #8
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	619a      	str	r2, [r3, #24]
 800392e:	e040      	b.n	80039b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d11b      	bne.n	800396e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003946:	f000 fd45 	bl	80043d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 020c 	bic.w	r2, r2, #12
 8003958:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	61da      	str	r2, [r3, #28]
 800396c:	e021      	b.n	80039b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d11c      	bne.n	80039ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003984:	f000 fd62 	bl	800444c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003996:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69d9      	ldr	r1, [r3, #28]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	021a      	lsls	r2, r3, #8
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	61da      	str	r2, [r3, #28]
 80039ac:	e001      	b.n	80039b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039de:	2302      	movs	r3, #2
 80039e0:	e0ae      	b.n	8003b40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	f200 809f 	bhi.w	8003b30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039f2:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003b31 	.word	0x08003b31
 8003a00:	08003b31 	.word	0x08003b31
 8003a04:	08003b31 	.word	0x08003b31
 8003a08:	08003a6d 	.word	0x08003a6d
 8003a0c:	08003b31 	.word	0x08003b31
 8003a10:	08003b31 	.word	0x08003b31
 8003a14:	08003b31 	.word	0x08003b31
 8003a18:	08003aaf 	.word	0x08003aaf
 8003a1c:	08003b31 	.word	0x08003b31
 8003a20:	08003b31 	.word	0x08003b31
 8003a24:	08003b31 	.word	0x08003b31
 8003a28:	08003aef 	.word	0x08003aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fa3e 	bl	8003eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0208 	orr.w	r2, r2, #8
 8003a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0204 	bic.w	r2, r2, #4
 8003a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6999      	ldr	r1, [r3, #24]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	619a      	str	r2, [r3, #24]
      break;
 8003a6a:	e064      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fa84 	bl	8003f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6999      	ldr	r1, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	021a      	lsls	r2, r3, #8
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	619a      	str	r2, [r3, #24]
      break;
 8003aac:	e043      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 facf 	bl	8004058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0208 	orr.w	r2, r2, #8
 8003ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0204 	bic.w	r2, r2, #4
 8003ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69d9      	ldr	r1, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	61da      	str	r2, [r3, #28]
      break;
 8003aec:	e023      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fb19 	bl	800412c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	021a      	lsls	r2, r3, #8
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	61da      	str	r2, [r3, #28]
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
      break;
 8003b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e0b4      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x186>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9c:	d03e      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0xd4>
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba2:	f200 8087 	bhi.w	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003baa:	f000 8086 	beq.w	8003cba <HAL_TIM_ConfigClockSource+0x172>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb2:	d87f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b70      	cmp	r3, #112	@ 0x70
 8003bb6:	d01a      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xa6>
 8003bb8:	2b70      	cmp	r3, #112	@ 0x70
 8003bba:	d87b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b60      	cmp	r3, #96	@ 0x60
 8003bbe:	d050      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x11a>
 8003bc0:	2b60      	cmp	r3, #96	@ 0x60
 8003bc2:	d877      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b50      	cmp	r3, #80	@ 0x50
 8003bc6:	d03c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0xfa>
 8003bc8:	2b50      	cmp	r3, #80	@ 0x50
 8003bca:	d873      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b40      	cmp	r3, #64	@ 0x40
 8003bce:	d058      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x13a>
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d86f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b30      	cmp	r3, #48	@ 0x30
 8003bd6:	d064      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	2b30      	cmp	r3, #48	@ 0x30
 8003bda:	d86b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d060      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d867      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05c      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d05a      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	e062      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bfe:	f000 fc7d 	bl	80044fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	609a      	str	r2, [r3, #8]
      break;
 8003c1a:	e04f      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c2c:	f000 fc66 	bl	80044fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c3e:	609a      	str	r2, [r3, #8]
      break;
 8003c40:	e03c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fb24 	bl	800429c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2150      	movs	r1, #80	@ 0x50
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fc33 	bl	80044c6 <TIM_ITRx_SetConfig>
      break;
 8003c60:	e02c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fb80 	bl	8004374 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2160      	movs	r1, #96	@ 0x60
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fc23 	bl	80044c6 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e01c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 fb04 	bl	800429c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fc13 	bl	80044c6 <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e00c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 fc0a 	bl	80044c6 <TIM_ITRx_SetConfig>
      break;
 8003cb2:	e003      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb8:	e000      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	d831      	bhi.n	8003d50 <HAL_TIM_ReadCapturedValue+0x78>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d51 	.word	0x08003d51
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d33 	.word	0x08003d33
 8003d08:	08003d51 	.word	0x08003d51
 8003d0c:	08003d51 	.word	0x08003d51
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	08003d51 	.word	0x08003d51
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003d51 	.word	0x08003d51
 8003d24:	08003d47 	.word	0x08003d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2e:	60fb      	str	r3, [r7, #12]

      break;
 8003d30:	e00f      	b.n	8003d52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	60fb      	str	r3, [r7, #12]

      break;
 8003d3a:	e00a      	b.n	8003d52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d42:	60fb      	str	r3, [r7, #12]

      break;
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	60fb      	str	r3, [r7, #12]

      break;
 8003d4e:	e000      	b.n	8003d52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d50:	bf00      	nop
  }

  return tmpreg;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3a      	ldr	r2, [pc, #232]	@ (8003e98 <TIM_Base_SetConfig+0xfc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00f      	beq.n	8003dd4 <TIM_Base_SetConfig+0x38>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dba:	d00b      	beq.n	8003dd4 <TIM_Base_SetConfig+0x38>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a37      	ldr	r2, [pc, #220]	@ (8003e9c <TIM_Base_SetConfig+0x100>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_Base_SetConfig+0x38>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a36      	ldr	r2, [pc, #216]	@ (8003ea0 <TIM_Base_SetConfig+0x104>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0x38>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a35      	ldr	r2, [pc, #212]	@ (8003ea4 <TIM_Base_SetConfig+0x108>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <TIM_Base_SetConfig+0xfc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01b      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df4:	d017      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a28      	ldr	r2, [pc, #160]	@ (8003e9c <TIM_Base_SetConfig+0x100>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a27      	ldr	r2, [pc, #156]	@ (8003ea0 <TIM_Base_SetConfig+0x104>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00f      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a26      	ldr	r2, [pc, #152]	@ (8003ea4 <TIM_Base_SetConfig+0x108>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a25      	ldr	r2, [pc, #148]	@ (8003ea8 <TIM_Base_SetConfig+0x10c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a24      	ldr	r2, [pc, #144]	@ (8003eac <TIM_Base_SetConfig+0x110>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a23      	ldr	r2, [pc, #140]	@ (8003eb0 <TIM_Base_SetConfig+0x114>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e98 <TIM_Base_SetConfig+0xfc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d103      	bne.n	8003e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f023 0201 	bic.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	611a      	str	r2, [r3, #16]
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40000c00 	.word	0x40000c00
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800

08003eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 0201 	bic.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0303 	bic.w	r3, r3, #3
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f023 0302 	bic.w	r3, r3, #2
 8003efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <TIM_OC1_SetConfig+0xc8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d10c      	bne.n	8003f2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0308 	bic.w	r3, r3, #8
 8003f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 0304 	bic.w	r3, r3, #4
 8003f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <TIM_OC1_SetConfig+0xc8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d111      	bne.n	8003f56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40010000 	.word	0x40010000

08003f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f023 0210 	bic.w	r2, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0320 	bic.w	r3, r3, #32
 8003fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	@ (8004054 <TIM_OC2_SetConfig+0xd4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10d      	bne.n	8003ffc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <TIM_OC2_SetConfig+0xd4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d113      	bne.n	800402c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800400a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000

08004058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004128 <TIM_OC3_SetConfig+0xd0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10d      	bne.n	80040d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a14      	ldr	r2, [pc, #80]	@ (8004128 <TIM_OC3_SetConfig+0xd0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d113      	bne.n	8004102 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	40010000 	.word	0x40010000

0800412c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	031b      	lsls	r3, r3, #12
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a10      	ldr	r2, [pc, #64]	@ (80041c8 <TIM_OC4_SetConfig+0x9c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d109      	bne.n	80041a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	019b      	lsls	r3, r3, #6
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000

080041cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0201 	bic.w	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a24      	ldr	r2, [pc, #144]	@ (8004288 <TIM_TI1_SetConfig+0xbc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004200:	d00f      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a21      	ldr	r2, [pc, #132]	@ (800428c <TIM_TI1_SetConfig+0xc0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a20      	ldr	r2, [pc, #128]	@ (8004290 <TIM_TI1_SetConfig+0xc4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <TIM_TI1_SetConfig+0xc8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_TI1_SetConfig+0x56>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a1e      	ldr	r2, [pc, #120]	@ (8004298 <TIM_TI1_SetConfig+0xcc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <TIM_TI1_SetConfig+0x5a>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <TIM_TI1_SetConfig+0x5c>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e003      	b.n	8004246 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800424c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	b2db      	uxtb	r3, r3
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f023 030a 	bic.w	r3, r3, #10
 8004260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f003 030a 	and.w	r3, r3, #10
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000
 800428c:	40000400 	.word	0x40000400
 8004290:	40000800 	.word	0x40000800
 8004294:	40000c00 	.word	0x40000c00
 8004298:	40014000 	.word	0x40014000

0800429c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 0201 	bic.w	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f023 030a 	bic.w	r3, r3, #10
 80042d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b087      	sub	sp, #28
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f023 0210 	bic.w	r2, r3, #16
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	b29b      	uxth	r3, r3
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800434c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	621a      	str	r2, [r3, #32]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0210 	bic.w	r2, r3, #16
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800439e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	031b      	lsls	r3, r3, #12
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	621a      	str	r2, [r3, #32]
}
 80043c8:	bf00      	nop
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f023 0303 	bic.w	r3, r3, #3
 8004400:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004410:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	b2db      	uxtb	r3, r3
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004424:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	621a      	str	r2, [r3, #32]
}
 8004440:	bf00      	nop
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004478:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	031b      	lsls	r3, r3, #12
 8004490:	b29b      	uxth	r3, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800449e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	031b      	lsls	r3, r3, #12
 80044a4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f043 0307 	orr.w	r3, r3, #7
 80044e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	021a      	lsls	r2, r3, #8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	431a      	orrs	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	2201      	movs	r2, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	43db      	mvns	r3, r3
 800455e:	401a      	ands	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1a      	ldr	r2, [r3, #32]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800459c:	2302      	movs	r3, #2
 800459e:	e050      	b.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1c      	ldr	r2, [pc, #112]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d018      	beq.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ec:	d013      	beq.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a18      	ldr	r2, [pc, #96]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a16      	ldr	r2, [pc, #88]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a15      	ldr	r2, [pc, #84]	@ (800465c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a13      	ldr	r2, [pc, #76]	@ (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d10c      	bne.n	8004630 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800461c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	4313      	orrs	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40014000 	.word	0x40014000

08004664 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <memset>:
 800468c:	4402      	add	r2, r0
 800468e:	4603      	mov	r3, r0
 8004690:	4293      	cmp	r3, r2
 8004692:	d100      	bne.n	8004696 <memset+0xa>
 8004694:	4770      	bx	lr
 8004696:	f803 1b01 	strb.w	r1, [r3], #1
 800469a:	e7f9      	b.n	8004690 <memset+0x4>

0800469c <__libc_init_array>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	4d0d      	ldr	r5, [pc, #52]	@ (80046d4 <__libc_init_array+0x38>)
 80046a0:	4c0d      	ldr	r4, [pc, #52]	@ (80046d8 <__libc_init_array+0x3c>)
 80046a2:	1b64      	subs	r4, r4, r5
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	2600      	movs	r6, #0
 80046a8:	42a6      	cmp	r6, r4
 80046aa:	d109      	bne.n	80046c0 <__libc_init_array+0x24>
 80046ac:	4d0b      	ldr	r5, [pc, #44]	@ (80046dc <__libc_init_array+0x40>)
 80046ae:	4c0c      	ldr	r4, [pc, #48]	@ (80046e0 <__libc_init_array+0x44>)
 80046b0:	f000 f818 	bl	80046e4 <_init>
 80046b4:	1b64      	subs	r4, r4, r5
 80046b6:	10a4      	asrs	r4, r4, #2
 80046b8:	2600      	movs	r6, #0
 80046ba:	42a6      	cmp	r6, r4
 80046bc:	d105      	bne.n	80046ca <__libc_init_array+0x2e>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c4:	4798      	blx	r3
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7ee      	b.n	80046a8 <__libc_init_array+0xc>
 80046ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ce:	4798      	blx	r3
 80046d0:	3601      	adds	r6, #1
 80046d2:	e7f2      	b.n	80046ba <__libc_init_array+0x1e>
 80046d4:	08004730 	.word	0x08004730
 80046d8:	08004730 	.word	0x08004730
 80046dc:	08004730 	.word	0x08004730
 80046e0:	08004734 	.word	0x08004734

080046e4 <_init>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr

080046f0 <_fini>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr
